install.packages(shiny)
install.packages("shiny")
ls
install.packages("data.frame")
install.packages("data.tables")
library(shiny)
runExample("01_hello")
runExample("01_hello")
ui <-
q
test <- c(1:3)
install.packages("profvis")
library(profvis)
shiny::runApp('code/sialab/covid_vis')
runApp('code/sialab/covid_vis')
profvis({runExample(example = "06_tabsets", display.mode = "normal")})
shiny::runApp('code/sialab/covid_vis')
runApp('code/sialab/covid_vis')
runApp('code/sialab/covid_vis')
profvis(runApp("./app.r"))
profvis(runApp("/home/lofatdairy/code/sialab/covid_vis/app.r"))
counties <- readOGR("our_data/US/counties_init.json")
states <- readOGR("our_data/US/states.json")
stateNames <- setNames(as.list(as.character(states$NAME)), states$STATE)
data <- fread("csse_data/csse_covid_19_data/csse_covid_19_daily_reports/03-24-2020.csv")
data <- data[data$Country_Region == "US"]
counties$STATENAME <- sapply(counties$STATE, function(x) {stateNames[[as.character(x)]]})
writeOGR(counties, "./our_data/US/counties.json", driver="GeoJSON")
setwd("/home/lofatdairy/code/sialab/covid_vis")
counties <- readOGR("our_data/US/counties_init.json")
states <- readOGR("our_data/US/states.json")
stateNames <- setNames(as.list(as.character(states$NAME)), states$STATE)
data <- fread("csse_data/csse_covid_19_data/csse_covid_19_daily_reports/03-24-2020.csv")
data <- data[data$Country_Region == "US"]
counties$STATENAME <- sapply(counties$STATE, function(x) {stateNames[[as.character(x)]]})
writeOGR(counties, "./our_data/US/counties.json", driver="GeoJSON")
writeOGR(counties, "./our_data/US/counties.json", layer = "counties_init", driver="GeoJSON")
counties <- readOGR("our_data/US/counties.json")
time <- Sys.time()
counties <- readOGR("our_data/US/counties.json")
print(Sys.time() - time)
time <- Sys.time()
counties <- readOGR("our_data/US/counties_low.json")
print(Sys.time() - time)
setwd("/home/lofatdairy/code/sialab/covid_vis")
counties <- readOGR("our_data/US/counties_low.json")
states <- readOGR("our_data/US/states.json")
stateNames <- setNames(as.list(as.character(states$NAME)), states$STATE)
data <- fread("csse_data/csse_covid_19_data/csse_covid_19_daily_reports/03-24-2020.csv")
data <- data[data$Country_Region == "US"]
counties$STATENAME <- sapply(counties$STATE, function(x) {stateNames[[as.character(x)]]})
writeOGR(counties, "./our_data/US/counties.json", layer = "counties_low", driver="GeoJSON")
counties <- readOGR("our_data/US/counties.json")
time <- Sys.time()
counties <- readOGR("our_data/US/counties.json")
print(Sys.time() - time)
data <- fread("csse_data/csse_covid_19_data/csse_covid_19_daily_reports/03-24-2020.csv")
data
data <- data[Country_Region == "US"]
data
caseHash <- new.env(hash = T)
caseHash[[c("test1", "test2")]] <- c(1, 2)
caseHash[["test1"]] <- 1
caseHash[["test1"]]
library(data.table)
setwd("/home/lofatdairy/code/sialab/covid_vis")
startData <- fread("csse_data/csse_covid_19_data/csse_covid_19_daily_reports/03-24-2020.csv")
startData$Confirmed
startData$Confirmed %>% sum()
sample_n(startData, size = 10, replace = T, weight = confirmed)
sample_n(startData, size = 10, replace = T, weight = Confirmed)
source('~/code/sialab/covid_vis/src/gen_test_data.r')
randomizedReads
randomizedReads$Long_
runif(10000)
runif(10000) > .6
source('~/code/sialab/covid_vis/src/gen_test_data.r')
randomizedReads
source('~/code/sialab/covid_vis/src/gen_test_data.r')
testObs
testObs$updated[1]
options(digits = 20)
testObs$updated[1]
source('~/code/sialab/covid_vis/src/gen_test_data.r')
obs <- fread("our_data/test/test.csv")
obs
install.packages("bit64")
library(base64)
library(bit64)
obs <- fread("our_data/test/test.csv")
obs
aggregated <- obs[.N, by = .(Admin2, Province_State)]
aggregated <- obs[, .N, by = .(Admin2, Province_State)]
aggregated
setwd("/home/lofatdairy/code/sialab/covid_vis")
startData <- fread("csse_data/csse_covid_19_data/csse_covid_19_daily_reports/03-24-2020.csv")
startData <- startData[Country_Region == "US"]
currentTime <- 1585363185178
startTime <- currentTime - 1000 * 60 * 60 * 24 * 5
testObs <- sample_n(startData, size = 100000, replace = T, weight = Confirmed)
testObs
source('~/code/sialab/covid_vis/src/gen_test_data.r')
counties <- readOGR("our_data/US/counties.json")
data <- fread("csse_data/csse_covid_19_data/csse_covid_19_daily_reports/03-24-2020.csv")
data <- data[Country_Region == "US"]
obs <- fread("our_data/test/test.csv")
aggregated <- obs[, .N, by = .(County, State)]
aggregate()
aggregated
aggregated <- obs[, .(tests = sum(Positive)), by = .(County, State)]
aggregated
aggregated <- obs[, .(sum(Positive), length(Positive)), by = .(County, State)]
aggregated
obs <- fread("our_data/test/test.csv")
aggregated <- obs[, .(Tests = length(Positive), Positive = sum(Positive)), by = .(County, State)]
aggregate()
aggregated
obs[County == "New York City" & State == "New York"]
obs[County == "New York City" & State == "New York"]$Positive
obs[County == "New York City" & State == "New York"]$Positive %>% sum
obs[County == "New York City" & State == "New York"]$Positive %>% length
aggregated <- obs[, .(Tests = length(Positive), Positive = sum(Positive)), by = .(County, State)]
aggregated[, Location = paste0(County, ", ", State)]
aggregated[, Location := paste0(County, ", ", State)]
aggregated
setkey(aggregated, Location)
aggregated
aggregated["York, Virginia"]
test <- "York, Virginia"
aggregated[test]
aggregated[test]$Positive
test <- c("York, Virginia", "Yuba, California")
aggregated[test, Positive]
data$Admin2
"Bronx" %in% counties$NAME
data[Admin2 == "Bronx"]
data[Admin2 == "New York City"]
counties$cases <- aggregated[paste0(counties$NAME, ", ", counties$STATENAME), Positive]
counties$cases
counties$NAME == "Kings"
counties$NAME == "Kings" %>% sum
counties$NAME == "Kings" %>% sum()
counties$NAME == "Kings" %>% sum(.)
sum(counties$NAME == "Kings")
data[Admin2 == "Kings"]
counties$CENSUSAREA
counties$LSAD
sum(counties$LSAD == "Borough")
which(counties$LSAD == "Borough")
counties[which(counties$LSAD == "Borough")]
counties$LSAD[which(counties$LSAD == "Borough")]
counties$NAME[which(counties$LSAD == "Borough")]
counties$NAME[which(counties$LSAD == "Cty&Bor")]
counties$NAME[which(counties$LSAD == "Muny")]
counties$NAME[which(counties$LSAD == "Muno")]
counties$LSAD[which(counties$NAME == "Bronx")]
counties$LSAD[which(counties$NAME == "New York")]
counties$LSAD[which(counties$NAME == "Queens")]
counties$LSAD[which(counties$NAME == "Kings")]
counties$LSAD[which(counties$NAME == "Richmond")]
counties$LSAD[which(counties$NAME == "Bronx")]
counties$STATE[which(counties$NAME == "Bronx")]
counties$STATENAME[which(counties$NAME == "Bronx")]
counties$cases <- aggregated[if_else(counties$STATENAME == "New York" & counties$NAME %in% c("Bronx", "New York", "Kings", "Queens", "Richmond"), "New York City, New York", paste0(counties$NAME, ", ", counties$STATENAME)), Positive]
counties$cases[which(counties$NAME == "Bronx")]
#Remove if_else if counties are actually reported correctly
counties$cases <- aggregated[if_else(counties$STATENAME == "New York" & counties$NAME %in% c("Bronx", "New York", "Kings", "Queens", "Richmond"), "New York City, New York", paste0(counties$NAME, ", ", counties$STATENAME)), Positive]
counties$cases[is.na(counties$cases)] <- 0
counties$cases
runApp()
profvis(runApp("~/code/sialab/covid_vis/app.r"))
counties$NAME[counties$LSAD == "Muno"]
countiesTest <- geojsonR::shiny_from_JSON("./our_data/US/counties.json")
runApp()
countiesTest
countiesTest <- geojsonR::FROM_GeoJson("./our_data/US/counties.json", Flatten_Coords = T)
countiesTest$features[[1]]
countiesTest$features[[2]]
countiesTest$features[[3]]
countiesTest$type
countiesTest <- geojsonR::FROM_GeoJson("./our_data/US/counties.json", Flatten_Coords = F)
countiesTest$features[[3]]
countiesTest <- geojsonio::geojson_read("./our_data/US/counties.json", what = "sp")
countiesTest
leaflet(countiesTest) %>%
addTiles() %>%
addProviderTiles(providers$CartoDB.DarkMatterNoLabels) %>%
addGeoJSON()
leaflet(countiesTest) %>%
addTiles() %>%
addProviderTiles(providers$CartoDB.DarkMatterNoLabels) %>%
addPolygons(stroke = FALSE, smoothFactor = 0.3, fillOpacity = 1,
#label = ~paste0(NAME),
group = "Tested"
) %>%
# addPolygons(stroke = FALSE, smoothFactor = 0.3, fillOpacity = ~ifelse(cases == 0, .5, .7),
#             color = ~ifelse(cases == 0, "#00FF00", pal(as.numeric(log10(cases)))),
#             label = ~paste0(NAME, ", ", STATENAME, ": ", cases),
#             group = "Positive"
#           ) %>%
addLayersControl(
baseGroups = c("Positive", "Tested"),
options = layersControlOptions(collapsed = FALSE)
)
leaflet(countiesTest) %>%
addTiles() %>%
addProviderTiles(providers$CartoDB.DarkMatterNoLabels) %>%
addPolygons(stroke = FALSE, smoothFactor = 0.3, fillOpacity = 1,
color = ~ifelse(cases == 0, "#00FF00", pal(as.numeric(log10(cases)))),
#label = ~paste0(NAME),
group = "Tested"
) %>%
# addPolygons(stroke = FALSE, smoothFactor = 0.3, fillOpacity = ~ifelse(cases == 0, .5, .7),
#             color = ~ifelse(cases == 0, "#00FF00", pal(as.numeric(log10(cases)))),
#             label = ~paste0(NAME, ", ", STATENAME, ": ", cases),
#             group = "Positive"
#           ) %>%
addLayersControl(
baseGroups = c("Positive", "Tested"),
options = layersControlOptions(collapsed = FALSE)
)
leaflet(countiesTest) %>%
addTiles() %>%
addProviderTiles(providers$CartoDB.DarkMatterNoLabels) %>%
addPolygons(stroke = FALSE, smoothFactor = 0.3, fillOpacity = 1,
color = ~"#00FF00",
label = ~paste0(NAME),
group = "Tested"
) %>%
# addPolygons(stroke = FALSE, smoothFactor = 0.3, fillOpacity = ~ifelse(cases == 0, .5, .7),
#             color = ~ifelse(cases == 0, "#00FF00", pal(as.numeric(log10(cases)))),
#             label = ~paste0(NAME, ", ", STATENAME, ": ", cases),
#             group = "Positive"
#           ) %>%
addLayersControl(
baseGroups = c("Positive", "Tested"),
options = layersControlOptions(collapsed = FALSE)
)
leaflet(countiesTest) %>%
addTiles() %>%
addProviderTiles(providers$CartoDB.DarkMatterNoLabels) %>%
addPolygons(stroke = FALSE, smoothFactor = 0.3, fillOpacity = 1,
color = ~pal(0),
label = ~paste0(NAME),
group = "Tested"
) %>%
# addPolygons(stroke = FALSE, smoothFactor = 0.3, fillOpacity = ~ifelse(cases == 0, .5, .7),
#             color = ~ifelse(cases == 0, "#00FF00", pal(as.numeric(log10(cases)))),
#             label = ~paste0(NAME, ", ", STATENAME, ": ", cases),
#             group = "Positive"
#           ) %>%
addLayersControl(
baseGroups = c("Positive", "Tested"),
options = layersControlOptions(collapsed = FALSE)
)
pal <- colorBin(colorRamp(c("#FFDD00","#FF0000")), domain = NULL, bins = 15)
leaflet(countiesTest) %>%
addTiles() %>%
addProviderTiles(providers$CartoDB.DarkMatterNoLabels) %>%
addPolygons(stroke = FALSE, smoothFactor = 0.3, fillOpacity = 1,
color = ~pal(0),
label = ~paste0(NAME),
group = "Tested"
) %>%
# addPolygons(stroke = FALSE, smoothFactor = 0.3, fillOpacity = ~ifelse(cases == 0, .5, .7),
#             color = ~ifelse(cases == 0, "#00FF00", pal(as.numeric(log10(cases)))),
#             label = ~paste0(NAME, ", ", STATENAME, ": ", cases),
#             group = "Positive"
#           ) %>%
addLayersControl(
baseGroups = c("Positive", "Tested"),
options = layersControlOptions(collapsed = FALSE)
)
leaflet(countiesTest) %>%
addTiles() %>%
addProviderTiles(providers$CartoDB.DarkMatterNoLabels) %>%
addPolygons(stroke = FALSE, smoothFactor = 0.3, fillOpacity = 1,
label = ~paste0(NAME),
group = "Tested"
) %>%
addPolygons(stroke = FALSE, smoothFactor = 0.3, fillOpacity = ~ifelse(cases == 0, .5, .7),
color = ~ifelse(cases == 0, "#00FF00", pal(as.numeric(log10(cases)))),
label = ~paste0(NAME, ", ", STATENAME, ": ", cases),
group = "Positive"
) %>%
addLayersControl(
baseGroups = c("Positive", "Tested"),
options = layersControlOptions(collapsed = FALSE)
)
runApp()
runApp()
shinytest
install.packages(testthat)
installed.packages(())
installed.packages()
runApp()
install.packages(shiny)
install.packages("shiny")
ls
install.packages("data.frame")
version
install.packages("data.tables")
library(name_UI <- function(id) {
ns <- NS(id)
tagList(
)
}
name <- function(input, output, session) {
})
shiny::runApp('code/sialab/covid_vis')
runApp()
ls
clear
runApp()
install.packages("shiny")
install.packages("shiny")
library("shiny")
shinytest
install.packages(testthat)
install.packages("data.table")
install.packages("dplyr")
install.packages("leaflet")
install.packages("leaflet.extras")
install.packages("rgdal")
install.packages("DT")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("shinydashboard")
runApp()
runApp()
runApp()
runApp('ui.R')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
head(global_header)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(shiny)
library(leaflet)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
