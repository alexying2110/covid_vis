},
server = FALSE
)
selected <- today[input$tbl_rows_selected, c(1:2)]
confirmedIdx <- which(confirmed$Province.State == selected[1] && confirmed$Country.Region == selected[2])
output$confirmed = renderPlot({
dates <- gsub("X", "", names(confirmed)[-c(1:4)])
confirmed_data <- data.frame(date = as.Date(dates, format="%m.%d.%y"), confirmed = as.numeric(confirmed[confirmedIdx,-c(1:4)]))
ggplot(data = confirmed_data, aes(x=date, y=confirmed)) + geom_line() + geom_point()
})
output$deaths = renderPlot({
dates <- gsub("X", "", names(deaths)[-c(1:4)])
deaths_data <- data.frame(date = as.Date(dates, format="%m.%d.%y"), deaths = as.numeric(deaths[selected,-c(1:4)]))
ggplot(data = deaths_data, aes(x=date, y=deaths)) + geom_line() + geom_point()
})
output$recovered = renderPlot({
dates <- gsub("X", "", names(recovered)[-c(1:4)])
recovered_data <- data.frame(date = as.Date(dates, format="%m.%d.%y"), recovered = as.numeric(recovered[selected,-c(1:4)]))
ggplot(data=recovered_data, aes(x=date, y=recovered)) + geom_line() + geom_point()
})
})
shinyApp(ui, server)
server <- shinyServer(function(input, output, session) {
output$tbl = DT::renderDataTable({
datatable(today, selection = "single")
},
server = FALSE
)
output$confirmed = renderPlot({
selected <- today[input$tbl_rows_selected, c(1:2)]
confirmedIdx <- which(confirmed$Province.State == selected[1] && confirmed$Country.Region == selected[2])
dates <- gsub("X", "", names(confirmed)[-c(1:4)])
confirmed_data <- data.frame(date = as.Date(dates, format="%m.%d.%y"), confirmed = as.numeric(confirmed[confirmedIdx,-c(1:4)]))
ggplot(data = confirmed_data, aes(x=date, y=confirmed)) + geom_line() + geom_point()
})
output$deaths = renderPlot({
dates <- gsub("X", "", names(deaths)[-c(1:4)])
deaths_data <- data.frame(date = as.Date(dates, format="%m.%d.%y"), deaths = as.numeric(deaths[selected,-c(1:4)]))
ggplot(data = deaths_data, aes(x=date, y=deaths)) + geom_line() + geom_point()
})
output$recovered = renderPlot({
dates <- gsub("X", "", names(recovered)[-c(1:4)])
recovered_data <- data.frame(date = as.Date(dates, format="%m.%d.%y"), recovered = as.numeric(recovered[selected,-c(1:4)]))
ggplot(data=recovered_data, aes(x=date, y=recovered)) + geom_line() + geom_point()
})
})
shinyApp(ui, server)
shinyApp(ui, server)
server <- shinyServer(function(input, output, session) {
output$tbl = DT::renderDataTable({
datatable(today[c(1:6)], selection = "single")
},
server = FALSE
)
output$confirmed = renderPlot({
selected <- today[input$tbl_rows_selected, c(1:2)]
confirmedIdx <- which(confirmed$Province.State == selected[1] && confirmed$Country.Region == selected[2])
dates <- gsub("X", "", names(confirmed)[-c(1:4)])
confirmed_data <- data.frame(date = as.Date(dates, format="%m.%d.%y"), confirmed = as.numeric(confirmed[confirmedIdx,-c(1:4)]))
ggplot(data = confirmed_data, aes(x=date, y=confirmed)) + geom_line() + geom_point()
})
output$deaths = renderPlot({
dates <- gsub("X", "", names(deaths)[-c(1:4)])
deaths_data <- data.frame(date = as.Date(dates, format="%m.%d.%y"), deaths = as.numeric(deaths[selected,-c(1:4)]))
ggplot(data = deaths_data, aes(x=date, y=deaths)) + geom_line() + geom_point()
})
output$recovered = renderPlot({
dates <- gsub("X", "", names(recovered)[-c(1:4)])
recovered_data <- data.frame(date = as.Date(dates, format="%m.%d.%y"), recovered = as.numeric(recovered[selected,-c(1:4)]))
ggplot(data=recovered_data, aes(x=date, y=recovered)) + geom_line() + geom_point()
})
})
shinyApp(ui, server)
ui <- fluidPage(
fluidRow(
column(12, DT::dataTableOutput('tbl')),
),
fluidRow(
column(4, plotOutput('confirmed', height = 500)),
column(4, plotOutput('deaths', height = 500)),
column(4, plotOutput('recovered', height = 500))
)
)
shinyApp(ui, server)
output$confirmed = renderPlot({
selected <- today[input$tbl_rows_selected, c(1:2)]
confirmedIdx <- which(confirmed$Province.State == as.character(selected[1]) && confirmed$Country.Region == as.character(selected[2]))
dates <- gsub("X", "", names(confirmed)[-c(1:4)])
confirmed_data <- data.frame(date = as.Date(dates, format="%m.%d.%y"), confirmed = as.numeric(confirmed[confirmedIdx,-c(1:4)]))
ggplot(data = confirmed_data, aes(x=date, y=confirmed)) + geom_line() + geom_point()
})
server <- shinyServer(function(input, output, session) {
output$tbl = DT::renderDataTable({
datatable(today[c(1:6)], selection = "single")
},
server = FALSE
)
output$confirmed = renderPlot({
selected <- today[input$tbl_rows_selected, c(1:2)]
confirmedIdx <- which(confirmed$Province.State == as.character(selected[1]) && confirmed$Country.Region == as.character(selected[2]))
dates <- gsub("X", "", names(confirmed)[-c(1:4)])
confirmed_data <- data.frame(date = as.Date(dates, format="%m.%d.%y"), confirmed = as.numeric(confirmed[confirmedIdx,-c(1:4)]))
ggplot(data = confirmed_data, aes(x=date, y=confirmed)) + geom_line() + geom_point()
})
output$deaths = renderPlot({
dates <- gsub("X", "", names(deaths)[-c(1:4)])
deaths_data <- data.frame(date = as.Date(dates, format="%m.%d.%y"), deaths = as.numeric(deaths[selected,-c(1:4)]))
ggplot(data = deaths_data, aes(x=date, y=deaths)) + geom_line() + geom_point()
})
output$recovered = renderPlot({
dates <- gsub("X", "", names(recovered)[-c(1:4)])
recovered_data <- data.frame(date = as.Date(dates, format="%m.%d.%y"), recovered = as.numeric(recovered[selected,-c(1:4)]))
ggplot(data=recovered_data, aes(x=date, y=recovered)) + geom_line() + geom_point()
})
})
output$confirmed = renderPlot({
selected <- today[input$tbl_rows_selected, c(1:2)]
confirmedIdx <- which(confirmed$Province.State == as.character(selected[1]) && confirmed$Country.Region == as.character(selected[2]))
dates <- gsub("X", "", names(confirmed)[-c(1:4)])
confirmed_data <- data.frame(date = as.Date(dates, format="%m.%d.%y"), confirmed = as.numeric(confirmed[confirmedIdx,-c(1:4)]))
ggplot(data = confirmed_data, aes(x=date, y=confirmed)) + geom_line() + geom_point()
})
shinyApp(ui, server)
debugSource('~/code/sialab/covid_vis/src/logistic.r')
shinyApp(ui, server)
View(selected)
test = dataframe(c(1, 2), c(3, 4))
test = data.frame(c(1, 2), c(3, 4))
test
test[1, c(1:2)]
test[1, c(1:2)] %>% as.numeric()
server <- shinyServer(function(input, output, session) {
output$tbl = DT::renderDataTable({
datatable(today[c(1:6)], selection = "single")
},
server = FALSE
)
output$confirmed = renderPlot({
selected <- input$tbl_rows_selected
selectedLoc <- as.character(today[selected, c(1:2)])
confirmedIdx <- which(confirmed$Province.State == selected[1] && confirmed$Country.Region == selected[2])
dates <- gsub("X", "", names(confirmed)[-c(1:4)])
print(confirmed)
confirmed_data <- data.frame(date = as.Date(dates, format="%m.%d.%y"), confirmed = as.numeric(confirmed[confirmedIdx,-c(1:4)]))
ggplot(data = confirmed_data, aes(x=date, y=confirmed)) + geom_line() + geom_point()
})
output$deaths = renderPlot({
dates <- gsub("X", "", names(deaths)[-c(1:4)])
deaths_data <- data.frame(date = as.Date(dates, format="%m.%d.%y"), deaths = as.numeric(deaths[selected,-c(1:4)]))
ggplot(data = deaths_data, aes(x=date, y=deaths)) + geom_line() + geom_point()
})
output$recovered = renderPlot({
dates <- gsub("X", "", names(recovered)[-c(1:4)])
recovered_data <- data.frame(date = as.Date(dates, format="%m.%d.%y"), recovered = as.numeric(recovered[selected,-c(1:4)]))
ggplot(data=recovered_data, aes(x=date, y=recovered)) + geom_line() + geom_point()
})
})
shinyApp(ui, server)
server <- shinyServer(function(input, output, session) {
output$tbl = DT::renderDataTable({
datatable(today[c(1:6)], selection = "single")
},
server = FALSE
)
output$confirmed = renderPlot({
selected <- input$tbl_rows_selected
selectedLoc <- as.character(today[selected, c(1:2)])
confirmedIdx <- which(confirmed$Province.State == selected[1] && confirmed$Country.Region == selected[2])
print(confirmed[confirmedIdx,])
dates <- gsub("X", "", names(confirmed)[-c(1:4)])
confirmed_data <- data.frame(date = as.Date(dates, format="%m.%d.%y"), confirmed = as.numeric(confirmed[confirmedIdx,-c(1:4)]))
ggplot(data = confirmed_data, aes(x=date, y=confirmed)) + geom_line() + geom_point()
})
output$deaths = renderPlot({
dates <- gsub("X", "", names(deaths)[-c(1:4)])
deaths_data <- data.frame(date = as.Date(dates, format="%m.%d.%y"), deaths = as.numeric(deaths[selected,-c(1:4)]))
ggplot(data = deaths_data, aes(x=date, y=deaths)) + geom_line() + geom_point()
})
output$recovered = renderPlot({
dates <- gsub("X", "", names(recovered)[-c(1:4)])
recovered_data <- data.frame(date = as.Date(dates, format="%m.%d.%y"), recovered = as.numeric(recovered[selected,-c(1:4)]))
ggplot(data=recovered_data, aes(x=date, y=recovered)) + geom_line() + geom_point()
})
})
shinyApp(ui, server)
server <- shinyServer(function(input, output, session) {
output$tbl = DT::renderDataTable({
datatable(today[c(1:6)], selection = "single")
},
server = FALSE
)
output$confirmed = renderPlot({
selected <- input$tbl_rows_selected
selectedLoc <- as.character(today[selected, c(1:2)])
print(selectedLoc)
confirmedIdx <- which(confirmed$Province.State == selected[1] && confirmed$Country.Region == selected[2])
dates <- gsub("X", "", names(confirmed)[-c(1:4)])
confirmed_data <- data.frame(date = as.Date(dates, format="%m.%d.%y"), confirmed = as.numeric(confirmed[confirmedIdx,-c(1:4)]))
ggplot(data = confirmed_data, aes(x=date, y=confirmed)) + geom_line() + geom_point()
})
output$deaths = renderPlot({
dates <- gsub("X", "", names(deaths)[-c(1:4)])
deaths_data <- data.frame(date = as.Date(dates, format="%m.%d.%y"), deaths = as.numeric(deaths[selected,-c(1:4)]))
ggplot(data = deaths_data, aes(x=date, y=deaths)) + geom_line() + geom_point()
})
output$recovered = renderPlot({
dates <- gsub("X", "", names(recovered)[-c(1:4)])
recovered_data <- data.frame(date = as.Date(dates, format="%m.%d.%y"), recovered = as.numeric(recovered[selected,-c(1:4)]))
ggplot(data=recovered_data, aes(x=date, y=recovered)) + geom_line() + geom_point()
})
})
shinyApp(ui, server)
server <- shinyServer(function(input, output, session) {
output$tbl = DT::renderDataTable({
datatable(today[c(1:6)], selection = "single")
},
server = FALSE
)
output$confirmed = renderPlot({
selected <- input$tbl_rows_selected
print(selected)
selectedLoc <- as.character(today[selected, c(1:2)])
print(selectedLoc)
confirmedIdx <- which(confirmed$Province.State == selected[1] && confirmed$Country.Region == selected[2])
dates <- gsub("X", "", names(confirmed)[-c(1:4)])
confirmed_data <- data.frame(date = as.Date(dates, format="%m.%d.%y"), confirmed = as.numeric(confirmed[confirmedIdx,-c(1:4)]))
ggplot(data = confirmed_data, aes(x=date, y=confirmed)) + geom_line() + geom_point()
})
output$deaths = renderPlot({
dates <- gsub("X", "", names(deaths)[-c(1:4)])
deaths_data <- data.frame(date = as.Date(dates, format="%m.%d.%y"), deaths = as.numeric(deaths[selected,-c(1:4)]))
ggplot(data = deaths_data, aes(x=date, y=deaths)) + geom_line() + geom_point()
})
output$recovered = renderPlot({
dates <- gsub("X", "", names(recovered)[-c(1:4)])
recovered_data <- data.frame(date = as.Date(dates, format="%m.%d.%y"), recovered = as.numeric(recovered[selected,-c(1:4)]))
ggplot(data=recovered_data, aes(x=date, y=recovered)) + geom_line() + geom_point()
})
})
shinyApp(ui, server)
today
today[1, c(1:2)]
as.character(today[1, c(1:2)])
as.factor(today[1, c(1:2)])
as.factor(today[1, ])
today[1, ]
today[1, ]$Province.State
as.character(today[1, ]$Province.State)
server <- shinyServer(function(input, output, session) {
output$tbl = DT::renderDataTable({
datatable(today[c(1:6)], selection = "single")
},
server = FALSE
)
output$confirmed = renderPlot({
selected <- input$tbl_rows_selected
print(selected)
selectedLoc <- as.character(c(today[selected,]$Provice.State, today[selected,]$Country.Region))
print(selectedLoc)
confirmedIdx <- which(confirmed$Province.State == selected[1] && confirmed$Country.Region == selected[2])
dates <- gsub("X", "", names(confirmed)[-c(1:4)])
confirmed_data <- data.frame(date = as.Date(dates, format="%m.%d.%y"), confirmed = as.numeric(confirmed[confirmedIdx,-c(1:4)]))
ggplot(data = confirmed_data, aes(x=date, y=confirmed)) + geom_line() + geom_point()
})
output$deaths = renderPlot({
dates <- gsub("X", "", names(deaths)[-c(1:4)])
deaths_data <- data.frame(date = as.Date(dates, format="%m.%d.%y"), deaths = as.numeric(deaths[selected,-c(1:4)]))
ggplot(data = deaths_data, aes(x=date, y=deaths)) + geom_line() + geom_point()
})
output$recovered = renderPlot({
dates <- gsub("X", "", names(recovered)[-c(1:4)])
recovered_data <- data.frame(date = as.Date(dates, format="%m.%d.%y"), recovered = as.numeric(recovered[selected,-c(1:4)]))
ggplot(data=recovered_data, aes(x=date, y=recovered)) + geom_line() + geom_point()
})
})
shinyApp(ui, server)
as.character(today[1,]$Province.State)
server <- shinyServer(function(input, output, session) {
output$tbl = DT::renderDataTable({
datatable(today[c(1:6)], selection = "single")
},
server = FALSE
)
output$confirmed = renderPlot({
selected <- input$tbl_rows_selected
print(selected)
province <- as.character(today[selected,]$Provice.State)
country <- as.character(today[selected,]$Country.Region)
print(provice)
print(country)
confirmedIdx <- which(confirmed$Province.State == province && confirmed$Country.Region == country)
dates <- gsub("X", "", names(confirmed)[-c(1:4)])
confirmed_data <- data.frame(date = as.Date(dates, format="%m.%d.%y"), confirmed = as.numeric(confirmed[confirmedIdx,-c(1:4)]))
ggplot(data = confirmed_data, aes(x=date, y=confirmed)) + geom_line() + geom_point()
})
output$deaths = renderPlot({
dates <- gsub("X", "", names(deaths)[-c(1:4)])
deaths_data <- data.frame(date = as.Date(dates, format="%m.%d.%y"), deaths = as.numeric(deaths[selected,-c(1:4)]))
ggplot(data = deaths_data, aes(x=date, y=deaths)) + geom_line() + geom_point()
})
output$recovered = renderPlot({
dates <- gsub("X", "", names(recovered)[-c(1:4)])
recovered_data <- data.frame(date = as.Date(dates, format="%m.%d.%y"), recovered = as.numeric(recovered[selected,-c(1:4)]))
ggplot(data=recovered_data, aes(x=date, y=recovered)) + geom_line() + geom_point()
})
})
as.character(today[1,]$Province.State)
shinyApp(ui, server)
server <- shinyServer(function(input, output, session) {
output$tbl = DT::renderDataTable({
datatable(today[c(1:6)], selection = "single")
},
server = FALSE
)
output$confirmed = renderPlot({
selected <- input$tbl_rows_selected
print(selected)
province <- as.character(today[selected,]$Provice.State)
country <- as.character(today[selected,]$Country.Region)
print(province)
print(country)
confirmedIdx <- which(confirmed$Province.State == province && confirmed$Country.Region == country)
dates <- gsub("X", "", names(confirmed)[-c(1:4)])
confirmed_data <- data.frame(date = as.Date(dates, format="%m.%d.%y"), confirmed = as.numeric(confirmed[confirmedIdx,-c(1:4)]))
ggplot(data = confirmed_data, aes(x=date, y=confirmed)) + geom_line() + geom_point()
})
output$deaths = renderPlot({
dates <- gsub("X", "", names(deaths)[-c(1:4)])
deaths_data <- data.frame(date = as.Date(dates, format="%m.%d.%y"), deaths = as.numeric(deaths[selected,-c(1:4)]))
ggplot(data = deaths_data, aes(x=date, y=deaths)) + geom_line() + geom_point()
})
output$recovered = renderPlot({
dates <- gsub("X", "", names(recovered)[-c(1:4)])
recovered_data <- data.frame(date = as.Date(dates, format="%m.%d.%y"), recovered = as.numeric(recovered[selected,-c(1:4)]))
ggplot(data=recovered_data, aes(x=date, y=recovered)) + geom_line() + geom_point()
})
})
shinyApp(ui, server)
server <- shinyServer(function(input, output, session) {
output$tbl = DT::renderDataTable({
datatable(today[c(1:6)], selection = "single")
},
server = FALSE
)
output$confirmed = renderPlot({
selected <- input$tbl_rows_selected
print(selected)
province <- as.character(today[selected,]$Province.State)
country <- as.character(today[selected,]$Country.Region)
print(province)
print(country)
confirmedIdx <- which(confirmed$Province.State == province && confirmed$Country.Region == country)
dates <- gsub("X", "", names(confirmed)[-c(1:4)])
confirmed_data <- data.frame(date = as.Date(dates, format="%m.%d.%y"), confirmed = as.numeric(confirmed[confirmedIdx,-c(1:4)]))
ggplot(data = confirmed_data, aes(x=date, y=confirmed)) + geom_line() + geom_point()
})
output$deaths = renderPlot({
dates <- gsub("X", "", names(deaths)[-c(1:4)])
deaths_data <- data.frame(date = as.Date(dates, format="%m.%d.%y"), deaths = as.numeric(deaths[selected,-c(1:4)]))
ggplot(data = deaths_data, aes(x=date, y=deaths)) + geom_line() + geom_point()
})
output$recovered = renderPlot({
dates <- gsub("X", "", names(recovered)[-c(1:4)])
recovered_data <- data.frame(date = as.Date(dates, format="%m.%d.%y"), recovered = as.numeric(recovered[selected,-c(1:4)]))
ggplot(data=recovered_data, aes(x=date, y=recovered)) + geom_line() + geom_point()
})
})
shinyApp(ui, server)
server <- shinyServer(function(input, output, session) {
output$tbl = DT::renderDataTable({
datatable(today[c(1:6)], selection = "single")
},
server = FALSE
)
output$confirmed = renderPlot({
selected <- input$tbl_rows_selected
print(selected)
province <- as.character(today[selected,]$Province.State)
country <- as.character(today[selected,]$Country.Region)
print(province)
print(country)
print(confirmed$Province.State == province)
confirmedIdx <- which(confirmed$Province.State == province && confirmed$Country.Region == country)
dates <- gsub("X", "", names(confirmed)[-c(1:4)])
confirmed_data <- data.frame(date = as.Date(dates, format="%m.%d.%y"), confirmed = as.numeric(confirmed[confirmedIdx,-c(1:4)]))
ggplot(data = confirmed_data, aes(x=date, y=confirmed)) + geom_line() + geom_point()
})
output$deaths = renderPlot({
dates <- gsub("X", "", names(deaths)[-c(1:4)])
deaths_data <- data.frame(date = as.Date(dates, format="%m.%d.%y"), deaths = as.numeric(deaths[selected,-c(1:4)]))
ggplot(data = deaths_data, aes(x=date, y=deaths)) + geom_line() + geom_point()
})
output$recovered = renderPlot({
dates <- gsub("X", "", names(recovered)[-c(1:4)])
recovered_data <- data.frame(date = as.Date(dates, format="%m.%d.%y"), recovered = as.numeric(recovered[selected,-c(1:4)]))
ggplot(data=recovered_data, aes(x=date, y=recovered)) + geom_line() + geom_point()
})
})
shinyApp(ui, server)
shinyApp(ui, server)
server <- shinyServer(function(input, output, session) {
output$tbl = DT::renderDataTable({
datatable(today[c(1:6)], selection = "single")
},
server = FALSE
)
output$confirmed = renderPlot({
selected <- input$tbl_rows_selected
print(selected)
province <- as.character(today[selected,]$Province.State)
country <- as.character(today[selected,]$Country.Region)
print(province)
print(country)
print(which(confirmed$Province.State == province))
confirmedIdx <- which(confirmed$Province.State == province && confirmed$Country.Region == country)
dates <- gsub("X", "", names(confirmed)[-c(1:4)])
confirmed_data <- data.frame(date = as.Date(dates, format="%m.%d.%y"), confirmed = as.numeric(confirmed[confirmedIdx,-c(1:4)]))
ggplot(data = confirmed_data, aes(x=date, y=confirmed)) + geom_line() + geom_point()
})
output$deaths = renderPlot({
dates <- gsub("X", "", names(deaths)[-c(1:4)])
deaths_data <- data.frame(date = as.Date(dates, format="%m.%d.%y"), deaths = as.numeric(deaths[selected,-c(1:4)]))
ggplot(data = deaths_data, aes(x=date, y=deaths)) + geom_line() + geom_point()
})
output$recovered = renderPlot({
dates <- gsub("X", "", names(recovered)[-c(1:4)])
recovered_data <- data.frame(date = as.Date(dates, format="%m.%d.%y"), recovered = as.numeric(recovered[selected,-c(1:4)]))
ggplot(data=recovered_data, aes(x=date, y=recovered)) + geom_line() + geom_point()
})
})
shinyApp(ui, server)
server <- shinyServer(function(input, output, session) {
output$tbl = DT::renderDataTable({
datatable(today[c(1:6)], selection = "single")
},
server = FALSE
)
output$confirmed = renderPlot({
selected <- input$tbl_rows_selected
print(selected)
province <- as.character(today[selected,]$Province.State)
country <- as.character(today[selected,]$Country.Region)
print(province)
print(country)
print(which(confirmed$Province.State == province && confirmed$Country.Region == country))
confirmedIdx <- which(confirmed$Province.State == province && confirmed$Country.Region == country)
dates <- gsub("X", "", names(confirmed)[-c(1:4)])
confirmed_data <- data.frame(date = as.Date(dates, format="%m.%d.%y"), confirmed = as.numeric(confirmed[confirmedIdx,-c(1:4)]))
ggplot(data = confirmed_data, aes(x=date, y=confirmed)) + geom_line() + geom_point()
})
output$deaths = renderPlot({
dates <- gsub("X", "", names(deaths)[-c(1:4)])
deaths_data <- data.frame(date = as.Date(dates, format="%m.%d.%y"), deaths = as.numeric(deaths[selected,-c(1:4)]))
ggplot(data = deaths_data, aes(x=date, y=deaths)) + geom_line() + geom_point()
})
output$recovered = renderPlot({
dates <- gsub("X", "", names(recovered)[-c(1:4)])
recovered_data <- data.frame(date = as.Date(dates, format="%m.%d.%y"), recovered = as.numeric(recovered[selected,-c(1:4)]))
ggplot(data=recovered_data, aes(x=date, y=recovered)) + geom_line() + geom_point()
})
})
shinyApp(ui, server)
server <- shinyServer(function(input, output, session) {
output$tbl = DT::renderDataTable({
datatable(today[c(1:6)], selection = "single")
},
server = FALSE
)
output$confirmed = renderPlot({
selected <- input$tbl_rows_selected
print(selected)
province <- as.character(today[selected,]$Province.State)
country <- as.character(today[selected,]$Country.Region)
print(province)
print(country)
print(which(confirmed$Province.State == province))
print(which(confirmed$Country.Region == country))
confirmedIdx <- which(confirmed$Province.State == province && confirmed$Country.Region == country)
dates <- gsub("X", "", names(confirmed)[-c(1:4)])
confirmed_data <- data.frame(date = as.Date(dates, format="%m.%d.%y"), confirmed = as.numeric(confirmed[confirmedIdx,-c(1:4)]))
ggplot(data = confirmed_data, aes(x=date, y=confirmed)) + geom_line() + geom_point()
})
output$deaths = renderPlot({
dates <- gsub("X", "", names(deaths)[-c(1:4)])
deaths_data <- data.frame(date = as.Date(dates, format="%m.%d.%y"), deaths = as.numeric(deaths[selected,-c(1:4)]))
ggplot(data = deaths_data, aes(x=date, y=deaths)) + geom_line() + geom_point()
})
output$recovered = renderPlot({
dates <- gsub("X", "", names(recovered)[-c(1:4)])
recovered_data <- data.frame(date = as.Date(dates, format="%m.%d.%y"), recovered = as.numeric(recovered[selected,-c(1:4)]))
ggplot(data=recovered_data, aes(x=date, y=recovered)) + geom_line() + geom_point()
})
})
shinyApp(ui, server)
source('~/code/sialab/covid_vis/src/logistic.r')
shinyApp(ui, server)
source('~/code/sialab/covid_vis/src/logistic.r')
source('~/code/sialab/covid_vis/src/logistic.r')
shinyApp(ui, server)
source('~/code/sialab/covid_vis/src/logistic.r')
shinyApp(ui, server)
source('~/code/sialab/covid_vis/app.r')
shinyApp(ui, server)
source('~/code/sialab/covid_vis/src/logistic.r')
source('~/code/sialab/covid_vis/src/logistic.r')
shinyApp(ui, server)
source('~/code/sialab/covid_vis/app.r')
shinyApp(ui, server)
source('~/code/sialab/covid_vis/app.r')
shinyApp(ui, server)
source('~/code/sialab/covid_vis/app.r')
shinyApp(ui, server)
