install.packages(shiny)
install.packages("shiny")
ls
install.packages("data.frame")
install.packages("data.tables")
library(shiny)
runExample("01_hello")
runExample("01_hello")
ui <-
q
test <- c(1:3)
install.packages("profvis")
library(profvis)
shiny::runApp('code/sialab/covid_vis')
runApp('code/sialab/covid_vis')
profvis({runExample(example = "06_tabsets", display.mode = "normal")})
shiny::runApp('code/sialab/covid_vis')
runApp('code/sialab/covid_vis')
runApp()
leaflet(counties) %>%
addTiles() %>%
addProviderTiles(providers$CartoDB.DarkMatterNoLabels) %>%
addPolygons(stroke = FALSE,
smoothFactor = 0.3,
fillOpacity = ~ifelse(cases == 0, .5, .7),
layerId = ~c(NAME, STATENAME),
color = ~if_else(cases == 0, "#00FF00", pal(as.numeric(log10(cases)))),
label = ~paste0(NAME, ", ", STATENAME, ": ", cases),
group = "Positive"
) %>%
addLayersControl(
baseGroups = c("Positive", "Tested"),
options = layersControlOptions(collapsed = FALSE)
)
runApp('code/sialab/covid_vis')
runApp('code/sialab/covid_vis')
runApp('code/sialab/covid_vis')
runApp('code/sialab/covid_vis')
runApp('code/sialab/covid_vis')
install.packages("surviva")
install.packages("survival")
#setwd("/home/ubuntu/covid_vis")
setwd("/home/lofatdairy/code/sialab/covid_vis")
obs <- fread("our_data/test/test.csv")
aggregated <- obs[, .(Tests = length(Positive), Positive = sum(Positive)), by = .(County, State)]
aggregated[, Location := paste0(County, ", ", State)]
setkey(aggregated, Location)
aggregated
aggregated[County = "York" & State = "Maine"]
aggregated[County == "York" & State == "Maine"]
Obs[County == "York" & State == "Maine"]
obs[County == "York" & State == "Maine"]
test = "test,funn"
strsplit(test, ",")
strsplit(test, ",")[1]
strsplit(test, ",")[[1]]
strsplit(test, ",")[[1]][1]
id1, id2 <- strsplit(test, ",")[[1]]
c(id1, id2) <- strsplit(test, ",")[[1]]
setorder(subset, Updated)
id <- strsplit(input$map_shape_click, ",")[[1]]
subset <- obs[County == id[1] & State = id[2]]
setorder(subset, Updated)
subset <- obs[County == id[1] & State = id[2]]
setorder(subset, Updated)
row.names(aggregated)
id <- "New York,New York"
subset <- obs[County == id[1] & State == id[2]]
subset
id <- "Los Angeles,California"
subset <- obs[County == id[1] & State == id[2]]
subset
obs[County = "Los Angeles"]
obs[,County = "Los Angeles"]
obs[County == "Los Angeles"]
obs[County == "Los Angeles" & State = "California "]
obs[County == "Los Angeles" & State = "California"]
obs[County == "Los Angeles" & State == "California"]
subset <- obs[County == "Los Angeles" & State == "California"]
setorder(subset, Updated)
subset[, nCases := as.numeric(row.names(subset))]
subset
ggplot(subset, aes(x = Updated, y = nCases)) + geom_step()
install.packages("scales")
install.packages("scales")
library(scales)
runApp()
ggplot(subset, aes(x = Updated, y = nCases)) +
geom_step() +
scale_y_continuous(name = "Number of Cases") +
scale_x_datetime(labels = date_format("%M-%D-%Y"))
subset$Updated %>% as.POSIXct()
subset$Updated %>% as.POSIXct(.)
subset$Updated %>% as.POSIXct(., "GMT")
subset$Updated %>% as.POSIXct(x = ., "GMT")
ggplot(subset, aes(x = Updated, y = nCases)) +
geom_step() +
scale_y_continuous(name = "Number of Cases")
ggplot(subset, aes(x = Updated, y = nCases)) +
geom_step() +
scale_y_continuous(name = "Number of Cases") +
scale_y_continuous(name = "Date", labels = labels)
ggplot(subset, aes(x = Updated, y = nCases)) +
geom_step() +
scale_y_continuous(name = "Number of Cases") +
scale_y_continuous(name = "Date", labels = labels)
ggplot(subset, aes(x = Updated, y = nCases)) +
geom_step() +
scale_y_continuous(name = "Number of Cases") +
scale_x_continuous(name = "Date", labels = labels)
ggplot(subset, aes(x = Updated, y = nCases)) +
geom_step() +
scale_y_continuous(name = "Number of Cases") +
scale_x_continuous(name = "Date", labels = date_format("%M/%D/%Y"))
ggplot(subset, aes(x = Updated, y = nCases)) +
geom_step() +
scale_y_continuous(name = "Number of Cases") +
scale_x_continuous(name = "Date", labels = date_format("%M/%D/%Y"))
ggplot(subset, aes(x = Updated, y = nCases)) +
geom_step() +
scale_y_continuous(name = "Number of Cases") +
scale_x_continuous(name = "Date", labels = date_format(format ="%M/%D/%Y"))
ggplot(subset, aes(x = Updated, y = nCases)) +
geom_step() +
scale_y_continuous(name = "Number of Cases") +
scale_x_continuous(name = "Date", labels = scales::date_format(format ="%M/%D/%Y"))
ggplot(subset, aes(x = Updated, y = nCases)) +
geom_step() +
scale_y_continuous(name = "Number of Cases") +
scale_x_continuous(name = "Date", labels = scales::date_format)
ggplot(subset, aes(x = Updated, y = nCases)) +
geom_step() +
scale_y_continuous(name = "Number of Cases") +
scale_x_continuous(name = "Date", labels = scales::label_date(format = "%m/%d/%y"))
subset$Updated
subset$Updated[1]
test <- subset$Updated[1]
as.POSIXct(test, "GMT")
as.DATE(test, origin="1970-01-01")
as.Date(test, origin="1970-01-01")
as.POSIXct(test, "GMT",  origin="1970-01-01")
as.POSIXct(subset$Updated, "GMT",  origin="1970-01-01")
as.Date(subset$Updated, "GMT",  origin="1970-01-01")
as.Date(as.POSIXct(subset$Updated, "GMT",  origin="1970-01-01"), format = "%M/%D/%Y")
as.Date(as.POSIXct(subset$Updated, "GMT",  origin="1970-01-01"), format = "%m/%d/%Y")
as.Date(x = as.POSIXct(subset$Updated, "GMT",  origin="1970-01-01"), format = "%m/%d/%Y")
as.Date(as.POSIXct(subset$Updated, "GMT",  origin="1970-01-01"), format = "%m/%d/%Y")
as.Date(as.POSIXct(subset$Updated, "GMT",  origin="1970-01-01")
)
as.POSIXct.Date(subset$Updated, "GMT",  origin="1970-01-01")
ggplot(subset, aes(x = Updated, y = nCases)) +
geom_step() +
scale_y_continuous(name = "Number of Cases") +
scale_x_continuous(name = "Date", labels = function(x) {as.Date(as.POSIXct(x, origin = "1970-01-01"))})
as.Date(as.POSIXct(subset$Updated, "GMT",  origin="1970-01-01")
)
subset$Updated
ggplot(subset, aes(x = Updated, y = nCases)) +
geom_step() +
scale_y_continuous(name = "Number of Cases") +
scale_x_continuous(name = "Date", labels = function(x) {as.Date(as.POSIXct(x, origin = "1970-01-01"))})
source('~/code/sialab/covid_vis/src/gen_test_data.r')
#setwd("/home/ubuntu/covid_vis")
setwd("/home/lofatdairy/code/sialab/covid_vis")
source('~/code/sialab/covid_vis/src/gen_test_data.r')
ggplot(subset, aes(x = Updated, y = nCases)) +
geom_step() +
scale_y_continuous(name = "Number of Cases") +
scale_x_continuous(name = "Date", labels = function(x) {as.Date(as.POSIXct(x, origin = "1970-01-01"))})
runApp()
obs <- fread("our_data/test/test.csv")
aggregated <- obs[, .(Tests = length(Positive), Positive = sum(Positive)), by = .(County, State)]
aggregated[, Location := paste0(County, ", ", State)]
setkey(aggregated, Location)
id <- strsplit(input$map_shape_click, ",")[[1]]
subset <- obs[County == id[1] & State == id[2]]
setorder(subset, Updated)
subset[, nCases := as.numeric(row.names(subset))]
ggplot(subset, aes(x = Updated, y = nCases)) +
geom_step() +
scale_y_continuous(name = "Number of Cases") +
scale_x_continuous(name = "Date", labels = function(x) {as.Date(as.POSIXct(x, origin = "1970-01-01"))})
id <- c("Los Angeles", "California")
subset <- obs[County == id[1] & State == id[2]]
setorder(subset, Updated)
subset[, nCases := as.numeric(row.names(subset))]
ggplot(subset, aes(x = Updated, y = nCases)) +
geom_step() +
scale_y_continuous(name = "Number of Cases") +
scale_x_continuous(name = "Date", labels = function(x) {as.Date(as.POSIXct(x, origin = "1970-01-01"))})
runApp()
subset
id <- strsplit(input$map_shape_click, ",")
subset <- obs[County == id[1] & State == id[2] & Positive]
setorder(subset, Updated)
subset[, nCases := as.numeric(row.names(subset))]
ggplot(subset, aes(x = Updated, y = nCases)) +
geom_step() +
scale_y_continuous(name = "Number of Cases") +
scale_x_continuous(name = "Date", labels = function(x) {as.Date(as.POSIXct(x, origin = "1970-01-01"))})
subset
breakdown <- subset[, sum(Positive), by = Race]
breakdown
nrows(subset)
nrow(subset)
subset <- obs[County == id[1] & State == id[2] & Positive]
breakdown <- subset[, length(Positive)/nrow(subset), by = Race]
breakdown
breakdown <- subset[, Percent = length(Positive)/nrow(subset) * 100, by = Race]
breakdown <- subset[, Percent := length(Positive)/nrow(subset) * 100, by = Race]
breakdown
breakdown
breakdown <- subset[,length(Positive)/nrow(subset) * 100, by = Race]
breakdown
subset <- obs[County == id[1] & State == id[2] & Positive]
breakdown <- subset[,length(Positive)/nrow(subset) * 100, by = Race]
ggplot(subset, aes(y = V1, fill = Race)) + geom_bar(width = 1) + coord_polar("y", start = 0)
breakdown <- subset[,length(Positive)/nrow(subset) * 100, by = Race]
ggplot(breakdown, aes(y = V1, fill = Race)) + geom_bar(width = 1) + coord_polar("y", start = 0)
#setwd("/home/ubuntu/covid_vis")
setwd("/home/lofatdairy/code/sialab/covid_vis")
# Reads in the geojson describing the county boundaries. This gives leaflet a set of points for each county that
# describes the county's border. counties is actually a list with the fields
counties <- readOGR("our_data/US/counties.json")
