mainPanel(
leafletOutput(outputId = "map")
),
),
fluidRow(
column(4,
plotOutput("logisticCurve")
),
column(4,
plotOutput("posAge")
),
column(4,
plotOutput("posRace")
)
)
),
#second dashboard tab content
tabItem(tabName = "graphs", h2("Graphs tab content here")
),
#third dashboard tab content
tabItem(tabName = "charts",
h2("Charts tab content here")
),
tabItem(tabName = "filters",
h2("Filters tab content here")
)
)
)
ui <- dashboardPage(
skin="blue",
dashboardHeader(title = "Covid-19 Dashboard"),
sidebar,
body
)
pal <- colorBin(colorRamp(c("#FFDD00","#FF0000")), domain = NULL, bins = 10)
counties <- readOGR("our_data/US/counties.json")
countyCenters <- fread("our_data/US/county_centers.csv")
server <- function(input, output, session) {
obs <- fread("our_data/test/test.csv")
updateSliderInput(
session,
"time",
value = as.POSIXct(max(obs$Updated), origin = "1970-01-01"),
min   = as.POSIXct(min(obs$Updated), origin = "1970-01-01"),
max   = as.POSIXct(max(obs$Updated), origin = "1970-01-01"),
timeFormat = "%b %d %Y, %H:%M"
)
# TODO: handle the fact that county names are fucked, and that state names are reproduced
# pop <- fread("our_data/US/census_pop_2019.csv")
# pop$CTYNAME[1835] <- "Dona Ana County"
# pop <- pop[!(CTYNAME == "District of Columbia" & COUNTY == 1)]
# pop[Location := paste0(unlist(strsplit(CTYNAME, " County")), ", ", STNAME)]
# setkey(pop, Location)
output$map <- renderLeaflet({
leaflet() %>%
addProviderTiles(providers$CartoDB.DarkMatterNoLabels) %>%
setView(lng = -97, lat = 39, zoom = 3)
})
observeEvent(input$markers, {
aggregated <- obs[, .(Tests = length(Positive), Positive = sum(Positive)), by = .(County, State)]
aggregated[, Location := paste0(County, ", ", State)]
setkey(aggregated, Location)
cases <- aggregated[, paste0(counties$NAME, ", ", counties$STATENAME), Positive]
cases[is.na(counties$cases)] <- 0
casesReact <- reactiveVal(cases)
tests <- aggregated[paste0(counties$NAME, ", ", counties$STATENAME), Tests]
tests[is.na(counties$tests)] <- 0
testsReact <- reactiveVal(tests)
beds <- fread("our_data/US/hospitals.csv")
beds <- beds[, .(Beds = sum(BEDS)), by = .(COUNTY, STATE)]
beds[, Location := paste0(COUNTY, ", ", STATE)]
setkey(beds, Location)
counties$beds <- beds[paste0(counties$NAME, ", ", counties$STATENAME), Beds]
counties$beds[is.na(counties$beds)] <- 0
counties$cases <- aggregated[paste0(counties$NAME, ", ", counties$STATENAME), Positive]
counties$cases[is.na(counties$cases)] <- 0
counties$tests <- aggregated[paste0(counties$NAME, ", ", counties$STATENAME), Tests]
counties$tests[is.na(counties$tests)] <- 0
# counties$ages <- aggregated[paste0(counties$NAME, ", ", counties$STATENAME), Ages]
# counties$ages[is.na(counties$ages)] <- 0
print("markers")
})
observeEvent(input$counties, {
})
observeEvent(input$time, {
print("time")
unixTime <- as.numeric(input$time)
# output$mymap <- renderLeaflet({
#   leaflet(counties) %>%
#     addTiles() %>%
#     addProviderTiles(providers$CartoDB.DarkMatterNoLabels) %>%
#     addPolygons(stroke = FALSE,
#                 smoothFactor = 0.3,
#                 fillOpacity = ~ifelse(cases == 0, .5, .7),
#                 color = ~if_else(cases == 0, "#00FF00", pal(as.numeric(log10(tests)))),
#                 label = ~paste0(NAME, ", ", STATENAME, ": ", cases),
#                 group = "Positive"
#     )%>%
#     addPolygons(stroke = FALSE,
#                 smoothFactor = 0.3,
#                 fillOpacity = ~ifelse(tests == 0, .5, .7),
#                 color = ~if_else(tests == 0, "#00FF00", pal(as.numeric(log10(tests)))),
#                 label = ~paste0(NAME, ", ", STATENAME, ": ", tests),
#                 group = "Tested"
#     ) %>%
#     # addPolygons(stroke = FALSE,
#     #             smoothFactor = 0.3,
#     #             fillOpacity = ~ifelse(ages == 0, .5, .7),
#     #             color = ~if_else(ages == 0, "#00FF00", pal(as.numeric(log10(ages)))),
#     #             label = ~paste0(NAME, ", ", STATENAME, ": ", ages),
#     #             group = "Ages"
#     # ) %>%
#     addPolygons(stroke = FALSE,
#                 smoothFactor = 0.3,
#                 fillOpacity = ~ifelse(beds == 0, .5, .7),
#                 color = ~if_else(beds == 0, "#00FF00", pal(as.numeric(log10(beds)))),
#                 label = ~paste0(NAME, ", ", STATENAME, ": ", beds),
#                 group = "Hospital Beds"
#     )
# })
}) #closing bracket for observeEvent()
observeEvent(input$map_shape_click, {
id <- strsplit(input$map_shape_click$id, ",")[[1]]
output$logisticCurve <- renderPlot({
subset <- obs[County == id[1] & State == id[2] & Positive]
setorder(subset, Updated)
subset[, nCases := as.numeric(row.names(subset))]
ggplot(subset, aes(x = Updated, y = nCases)) +
geom_step() +
theme_minimal() +
scale_y_continuous(name = "Number of Cases") +
scale_x_continuous(name = "Date", labels = function(x) {as.Date(as.POSIXct(x, origin = "1970-01-01"))})
})
output$posRace <- renderPlot({
subset <- obs[County == id[1] & State == id[2] & Positive]
ggplot(subset, aes(Race)) +
geom_bar() +
theme_minimal()
})
output$posAge <- renderPlot({
subset <- obs[County == id[1] & State == id[2] & Positive]
ggplot(subset, aes(Age)) +
geom_histogram(bins = 5) +
theme_minimal()
})
})
}
shinyApp(ui, server)
# setwd("/home/ubuntu/covid_vis")
setwd("/home/lofatdairy/code/sialab/covid_vis")
# setwd("/home/ubuntu/covid_vis")
setwd("/home/lofatdairy/code/sialab/covid_vis")
shinyApp(ui, server)
countyCenters
countyCenters <- fread("our_data/US/county_centers.csv")
countyCenters
aggregated <- obs[Updated < input$time, .(Tests = length(Positive), Positive = sum(Positive)), by = .(County, State)]
obs <- fread("our_data/test/test.csv")
aggregated <- obs[Updated < input$time, .(Tests = length(Positive), Positive = sum(Positive)), by = .(County, State)]
aggregated <- obs[, .(Tests = length(Positive), Positive = sum(Positive)), by = .(County, State)]
countyCenters[aggregated$Location]
countyCenters[Location == aggregated$Location]
countyCenters[, aggregated$Location]
aggregated$Location
aggregated[, Location := paste0(County, ", ", State)]
setkey(aggregated, Location)
countyCenters[, aggregated$Location]
countyCenters[aggregated$Location, Lat]
countyCenters[aggregated$Location]
setkey(countCenters, Location)
setkey(countyCenters, Location)
countyCenters[aggregated$Location]
countyCenters[aggregated$Location, Lat]
aggregated
runApp()
countyCenters
countyCenters <- fread("our_data/US/county_centers.csv", key = "Location")
countyCenters
runApp()
aggregated$Lat <- countyCenters[aggregated$Location, Lat]
aggregated$Long <- countyCenters[aggregated$Location, Long]
aggregated
leafletProxy("map", data = aggregated) %>%
removeMarker("marker") %>%
addCircleMarkers(lng = Long,
lat = Lat,
radius = log10(if_else(input$markers == "Tests", Tests, Positive)),
color = "#FF0000",
)
observeEvent(input$markers, {
aggregated <- obs[Updated < input$time, .(Tests = length(Positive), Positive = sum(Positive)), by = .(County, State)]
aggregated[, Location := paste0(County, ", ", State)]
setkey(aggregated, Location)
aggregated$Lat <- countyCenters[aggregated$Location, Lat]
aggregated$Long <- countyCenters[aggregated$Location, Long]
leafletProxy("map", data = aggregated) %>%
removeMarker("marker") %>%
addCircleMarkers(lng = Long,
lat = Lat,
radius = log10(if_else(input$markers == "Tests", Tests, Positive)),
color = "#FF0000",
)
})
runApp()
observeEvent(input$markers | input$time, {
aggregated <- obs[Updated < input$time, .(Tests = length(Positive), Positive = sum(Positive)), by = .(County, State)]
aggregated[, Location := paste0(County, ", ", State)]
setkey(aggregated, Location)
aggregated$Lat <- countyCenters[aggregated$Location, Lat]
aggregated$Long <- countyCenters[aggregated$Location, Long]
leafletProxy("map", data = aggregated) %>%
removeMarker("marker") %>%
addCircleMarkers(lng = Long,
lat = Lat,
radius = log10(if_else(input$markers == "Tests", Tests, Positive)),
color = "#FF0000",
)
})
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
as.POSIXct(min(obs$Updated), origin = "1970-01-01")
as.POSIXct(min(obs$Updated), origin = "1970-01-01") %>% as.numeric()
min(obs$Updated) / 3600000
min(obs$Updated) / 3600
min(obs$Updated) / 3600 %>% floor()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(shiny)
library(leaflet)
library(leaflet.extras)
library(rgdal)
library(dplyr)
library(DT)
library(data.table)
library(bit64)
library(ggplot2)
library(rsconnect)
library(profvis)
library(scales)
library(shinydashboard)
# setwd("/home/ubuntu/covid_vis")
setwd("/home/lofatdairy/code/sialab/covid_vis")
sidebar <- dashboardSidebar(
sidebarMenu(
menuItem("Dashboard", tabName = "maps", icon = icon("dashboard")),
menuItem("Graphs", tabName = "graphs", icon = icon("th")),
menuItem("Charts", tabName = "charts", icon = icon("th")),
menuItem("Filters", tabName = "filters", icon = icon("th")),
width = 230
)
)
body <- dashboardBody(
tabItems(
#first dashboard tab content
tabItem(tabName = "maps",
fluidRow(
sidebarPanel(
sliderInput("time",
label = h3("Time"),
min = 0,
max = 0,
value = 0,
step = 300000,
animate = animationOptions(interval = 100, loop = T),
ticks = T
),
radioButtons("markers", label = h3("Placeholder"), choices = c("Cases", "Tests", "Cases Per Capita")),
radioButtons("counties", label = h3("Placeholder 2"), choices = c("Population", "Beds", "Elderly Population", "Comorbidities"))
),
mainPanel(
leafletOutput(outputId = "map")
),
),
fluidRow(
column(4,
plotOutput("logisticCurve")
),
column(4,
plotOutput("posAge")
),
column(4,
plotOutput("posRace")
)
)
),
#second dashboard tab content
tabItem(tabName = "graphs", h2("Graphs tab content here")
),
#third dashboard tab content
tabItem(tabName = "charts",
h2("Charts tab content here")
),
tabItem(tabName = "filters",
h2("Filters tab content here")
)
)
)
ui <- dashboardPage(
skin="blue",
dashboardHeader(title = "Covid-19 Dashboard"),
sidebar,
body
)
pal <- colorBin(colorRamp(c("#FFDD00","#FF0000")), domain = NULL, bins = 10)
counties <- readOGR("our_data/US/counties.json")
countyCenters <- fread("our_data/US/county_centers.csv", key = "Location")
server <- function(input, output, session) {
obs <- fread("our_data/test/test.csv")
updateMax <- ceiling(max(obs$Updated) / 300) * 300
updateMin <- floor(min(obs$Updated) / 300) * 300
updateSliderInput(
session,
"time",
value = as.POSIXct(updateMax, origin = "1970-01-01"),
min   = as.POSIXct(updateMin, origin = "1970-01-01"),
max   = as.POSIXct(updateMax, origin = "1970-01-01"),
timeFormat = "%b %d %Y, %H:%M"
)
# TODO: handle the fact that county names are fucked, and that state names are reproduced
# pop <- fread("our_data/US/census_pop_2019.csv")
# pop$CTYNAME[1835] <- "Dona Ana County"
# pop <- pop[!(CTYNAME == "District of Columbia" & COUNTY == 1)]
# pop[Location := paste0(unlist(strsplit(CTYNAME, " County")), ", ", STNAME)]
# setkey(pop, Location)
listener <- reactive({
list(input$markers, input$time)
})
output$map <- renderLeaflet({
leaflet() %>%
addProviderTiles(providers$CartoDB.DarkMatterNoLabels) %>%
setView(lng = -97, lat = 39, zoom = 3)
})
observeEvent(listener(), {
unixTime <- as.numeric(input$time)
aggregated <- obs[Updated < unixTime, .(Tests = length(Positive), Positive = sum(Positive)), by = .(County, State)]
aggregated[, Location := paste0(County, ", ", State)]
setkey(aggregated, Location)
aggregated$Lat <- countyCenters[aggregated$Location, Lat]
aggregated$Long <- countyCenters[aggregated$Location, Long]
leafletProxy("map", data = aggregated) %>%
clearShapes() %>%
clearMarkers() %>%
addCircles(lng = ~Long,
lat = ~Lat,
radius = ~ifelse(input$markers == "Tests", Tests, Positive) * 1000,
color = ~ifelse(input$markers == "Tests", "#FF0000", "#FFDD00"),
group = "marker"
)
})
observeEvent(input$counties, {
beds <- fread("our_data/US/hospitals.csv")
beds <- beds[, .(Beds = sum(BEDS)), by = .(COUNTY, STATE)]
beds[, Location := paste0(COUNTY, ", ", STATE)]
setkey(beds, Location)
counties$beds <- beds[paste0(counties$NAME, ", ", counties$STATENAME), Beds]
counties$beds[is.na(counties$beds)] <- 0
counties$cases <- aggregated[paste0(counties$NAME, ", ", counties$STATENAME), Positive]
counties$cases[is.na(counties$cases)] <- 0
counties$tests <- aggregated[paste0(counties$NAME, ", ", counties$STATENAME), Tests]
counties$tests[is.na(counties$tests)] <- 0
# counties$ages <- aggregated[paste0(counties$NAME, ", ", counties$STATENAME), Ages]
# counties$ages[is.na(counties$ages)] <- 0
# output$mymap <- renderLeaflet({
#   leaflet(counties) %>%
#     addTiles() %>%
#     addProviderTiles(providers$CartoDB.DarkMatterNoLabels) %>%
#     addPolygons(stroke = FALSE,
#                 smoothFactor = 0.3,
#                 fillOpacity = ~ifelse(cases == 0, .5, .7),
#                 color = ~if_else(cases == 0, "#00FF00", pal(as.numeric(log10(tests)))),
#                 label = ~paste0(NAME, ", ", STATENAME, ": ", cases),
#                 group = "Positive"
#     )%>%
#     addPolygons(stroke = FALSE,
#                 smoothFactor = 0.3,
#                 fillOpacity = ~ifelse(tests == 0, .5, .7),
#                 color = ~if_else(tests == 0, "#00FF00", pal(as.numeric(log10(tests)))),
#                 label = ~paste0(NAME, ", ", STATENAME, ": ", tests),
#                 group = "Tested"
#     ) %>%
#     # addPolygons(stroke = FALSE,
#     #             smoothFactor = 0.3,
#     #             fillOpacity = ~ifelse(ages == 0, .5, .7),
#     #             color = ~if_else(ages == 0, "#00FF00", pal(as.numeric(log10(ages)))),
#     #             label = ~paste0(NAME, ", ", STATENAME, ": ", ages),
#     #             group = "Ages"
#     # ) %>%
#     addPolygons(stroke = FALSE,
#                 smoothFactor = 0.3,
#                 fillOpacity = ~ifelse(beds == 0, .5, .7),
#                 color = ~if_else(beds == 0, "#00FF00", pal(as.numeric(log10(beds)))),
#                 label = ~paste0(NAME, ", ", STATENAME, ": ", beds),
#                 group = "Hospital Beds"
#     )
# })
})
observeEvent(input$map_shape_click, {
id <- strsplit(input$map_shape_click$id, ",")[[1]]
output$logisticCurve <- renderPlot({
subset <- obs[County == id[1] & State == id[2] & Positive]
setorder(subset, Updated)
subset[, nCases := as.numeric(row.names(subset))]
ggplot(subset, aes(x = Updated, y = nCases)) +
geom_step() +
theme_minimal() +
scale_y_continuous(name = "Number of Cases") +
scale_x_continuous(name = "Date", labels = function(x) {as.Date(as.POSIXct(x, origin = "1970-01-01"))})
})
output$posRace <- renderPlot({
subset <- obs[County == id[1] & State == id[2] & Positive]
ggplot(subset, aes(Race)) +
geom_bar() +
theme_minimal()
})
output$posAge <- renderPlot({
subset <- obs[County == id[1] & State == id[2] & Positive]
ggplot(subset, aes(Age)) +
geom_histogram(bins = 5) +
theme_minimal()
})
})
}
shinyApp(ui, server)
runApp()
runApp()
runApp()
output$map <- renderLeaflet({
leaflet() %>%
addProviderTiles(providers$CartoDB.DarkMatterNoLabels) %>%
setView(lng = -97, lat = 39, zoom = 3)
})
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
print(aggregated$Tests)
runApp()
print(log10(aggregated$Tests))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
aggTest <- obs[, .(Tests = length(Positive), Positive = sum(Positive)), by = .(Race)]
aggTest
aggTest[, Tests]
aggTest[, c(Tests, Race)]
aggTest[Tests]
aggTest
aggTest[, c(Race, Tests), with = F]
aggTest[, c(Race, Tests), with = F]
aggTest
aggTest[, c("Race", "Tests"), with = F]
aggTest[, c("Race", "Tests"), with = F] %>% hist()
aggTest[, c("Race", "Tests"), with = F]
hist(aggTest[, c("Race", "Tests"), with = F])
aggTest[, Tests]
hist(aggTest[, Tests])
hist(aggTest[, Race])
hist(aggTest[, Race], frequence = aggTest[, Tests])
aggTest <- obs[, .(Tests = length(Positive), Positive = sum(Positive)), by = .(Age)]
hist(aggTest$Age, aggTest$Positive)
hist(aggTest$Age, freq = aggTest$Positive)
aggTest
runApp()
runApp()
runApp()
runApp()
beds
beds <- fread("our_data/US/hospitals.csv")
beds <- beds[, .(Beds = sum(BEDS)), by = .(COUNTY, STATE)]
beds
state.name[which(beds$STATE == state.abb)]
beds$STATE
beds$STATE %in% state.abb
beds$STATE[!beds$STATE %in% state.abb]
which(beds$STATE == state.abb)
match(beds$STATE, state.abb)
