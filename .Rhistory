addProviderTiles(providers$CartoDB.DarkMatterNoLabels) %>%
addCircles(
data = data,
lat = ~Lat,
lng = ~Long,
weight = 1,
radius = ~log(eval(as.symbol(Confirmed))) * 50000,
fillOpacity = 0.5,
#popup=~paste0(
#  ifelse(Province.State == '', as.character(Country.Region), paste0(Province.State, ", ", Country.Region)),
#"<br># Confirmed: ", eval(as.symbol(Confirmed)),
#"<br># Recovered: ", eval(as.symbol(Recovered)),
#"<br># Deaths: ", eval(as.symbol(Deaths)),
#"<br># Active: ", eval(as.symbol(Confirmed)) - eval(as.symbol(Deaths)) - eval(as.symbol(Recovered)),
#),
#color=~pal(.5 - ((eval(as.symbol(Recovered)) - eval(as.symbol((Deaths)))) / 2 / eval(as.symbol(((Confirmed)))))),
#label = ~ifelse(Province.State == '', as.character(Country.Region), paste0(Province.State, ", ", Country.Region)),
)
})
}
shinyApp(ui, server)
server <- function(input, output, session) {
pal <- colorBin(colorRamp(c("#00FF00","#FFDD00","#FF0000")), domain = NULL, bins = 15)
output$mymap <- renderLeaflet({
date <- gsub("\\.0", ".", format(input$Date, "%m.%d.%y"))
Confirmed = paste0("X", substring(date, 2), ".confirmed")
Deaths = paste0("X", substring(date, 2), ".deaths")
Recovered = paste0("X", substring(date, 2))
leaflet(data) %>%
setView(lng = 0, lat = 0, zoom = 1.5) %>%
addProviderTiles(providers$CartoDB.DarkMatterNoLabels) %>%
addCircles(
data = data,
lat = ~Lat,
lng = ~Long,
weight = 1,
radius = ~log(eval(as.symbol(Confirmed))) * 50000,
fillOpacity = 0.5,
#popup=~paste0(
#  ifelse(Province.State == '', as.character(Country.Region), paste0(Province.State, ", ", Country.Region)),
#"<br># Confirmed: ", eval(as.symbol(Confirmed)),
#"<br># Recovered: ", eval(as.symbol(Recovered)),
#"<br># Deaths: ", eval(as.symbol(Deaths)),
#"<br># Active: ", eval(as.symbol(Confirmed)) - eval(as.symbol(Deaths)) - eval(as.symbol(Recovered)),
#),
#color=~pal(.5 - ((eval(as.symbol(Recovered)) - eval(as.symbol((Deaths)))) / 2 / eval(as.symbol(((Confirmed)))))),
label = ~ifelse(Province.State == '', as.character(Country.Region), paste0(Province.State, ", ", Country.Region)),
)
})
}
shinyApp(ui, server)
leaflet(data) %>%
setView(lng = 0, lat = 0, zoom = 1.5) %>%
addProviderTiles(providers$CartoDB.DarkMatterNoLabels) %>%
addCircles(
data = data,
lat = ~Lat,
lng = ~Long,
weight = 1,
radius = ~log(eval(as.symbol(Confirmed))) * 50000,
fillOpacity = 0.5,
#popup=~paste0(
#  ifelse(Province.State == '', as.character(Country.Region), paste0(Province.State, ", ", Country.Region)),
#"<br># Confirmed: ", eval(as.symbol(Confirmed)),
#"<br># Recovered: ", eval(as.symbol(Recovered)),
#"<br># Deaths: ", eval(as.symbol(Deaths)),
#"<br># Active: ", eval(as.symbol(Confirmed)) - eval(as.symbol(Deaths)) - eval(as.symbol(Recovered)),
#),
color=~pal(.5 - ((eval(as.symbol(Recovered)) - eval(as.symbol((Deaths)))) / 2 / eval(as.symbol(((Confirmed)))))),
label = ~ifelse(Province.State == '', as.character(Country.Region), paste0(Province.State, ", ", Country.Region)),
)
server <- function(input, output, session) {
pal <- colorBin(colorRamp(c("#00FF00","#FFDD00","#FF0000")), domain = NULL, bins = 15)
output$mymap <- renderLeaflet({
date <- gsub("\\.0", ".", format(input$Date, "%m.%d.%y"))
Confirmed = paste0("X", substring(date, 2), ".confirmed")
Deaths = paste0("X", substring(date, 2), ".deaths")
Recovered = paste0("X", substring(date, 2))
leaflet(data) %>%
setView(lng = 0, lat = 0, zoom = 1.5) %>%
addProviderTiles(providers$CartoDB.DarkMatterNoLabels) %>%
addCircles(
data = data,
lat = ~Lat,
lng = ~Long,
weight = 1,
radius = ~log(eval(as.symbol(Confirmed))) * 50000,
fillOpacity = 0.5,
#popup=~paste0(
#  ifelse(Province.State == '', as.character(Country.Region), paste0(Province.State, ", ", Country.Region)),
#"<br># Confirmed: ", eval(as.symbol(Confirmed)),
#"<br># Recovered: ", eval(as.symbol(Recovered)),
#"<br># Deaths: ", eval(as.symbol(Deaths)),
#"<br># Active: ", eval(as.symbol(Confirmed)) - eval(as.symbol(Deaths)) - eval(as.symbol(Recovered)),
#),
color=~pal(.5 - ((eval(as.symbol(Recovered)) - eval(as.symbol((Deaths)))) / 2 / eval(as.symbol(((Confirmed)))))),
label = ~ifelse(Province.State == '', as.character(Country.Region), paste0(Province.State, ", ", Country.Region)),
)
})
}
shinyApp(ui, server)
leaflet(data) %>%
setView(lng = 0, lat = 0, zoom = 1.5) %>%
addProviderTiles(providers$CartoDB.DarkMatterNoLabels) %>%
addCircles(
data = data,
lat = ~Lat,
lng = ~Long,
weight = 1,
radius = ~log(eval(as.symbol(Confirmed))) * 50000,
fillOpacity = 0.5,
#popup=~paste0(
#  ifelse(Province.State == '', as.character(Country.Region), paste0(Province.State, ", ", Country.Region)),
#"<br># Confirmed: ", eval(as.symbol(Confirmed)),
#"<br># Recovered: ", eval(as.symbol(Recovered)),
#"<br># Deaths: ", eval(as.symbol(Deaths)),
#"<br># Active: ", eval(as.symbol(Confirmed)) - eval(as.symbol(Deaths)) - eval(as.symbol(Recovered)),
#),
#color=~pal(.5 - ((eval(as.symbol(Recovered)) - eval(as.symbol((Deaths)))) / 2 / eval(as.symbol(((Confirmed)))))),
color = ~pal(eval(as.symbol(Deaths)) / eval(as.symbol(Confirmed)))
label = ~ifelse(Province.State == '', as.character(Country.Region), paste0(Province.State, ", ", Country.Region)),
)
server <- function(input, output, session) {
pal <- colorBin(colorRamp(c("#00FF00","#FFDD00","#FF0000")), domain = NULL, bins = 15)
pal <- colorBin(colorRamp(c("#FFBB00","#FF0000"), interpolate = "linear"), domain = c(0:1), bins = 10)
output$mymap <- renderLeaflet({
date <- gsub("\\.0", ".", format(input$Date, "%m.%d.%y"))
Confirmed = paste0("X", substring(date, 2), ".confirmed")
Deaths = paste0("X", substring(date, 2), ".deaths")
Recovered = paste0("X", substring(date, 2))
leaflet(data) %>%
setView(lng = 0, lat = 0, zoom = 1.5) %>%
addProviderTiles(providers$CartoDB.DarkMatterNoLabels) %>%
addCircles(
data = data,
lat = ~Lat,
lng = ~Long,
weight = 1,
radius = ~log(eval(as.symbol(Confirmed))) * 50000,
fillOpacity = 0.5,
#popup=~paste0(
#  ifelse(Province.State == '', as.character(Country.Region), paste0(Province.State, ", ", Country.Region)),
#"<br># Confirmed: ", eval(as.symbol(Confirmed)),
#"<br># Recovered: ", eval(as.symbol(Recovered)),
#"<br># Deaths: ", eval(as.symbol(Deaths)),
#"<br># Active: ", eval(as.symbol(Confirmed)) - eval(as.symbol(Deaths)) - eval(as.symbol(Recovered)),
#),
#color=~pal(.5 - ((eval(as.symbol(Recovered)) - eval(as.symbol((Deaths)))) / 2 / eval(as.symbol(((Confirmed)))))),
color = ~pal(eval(as.symbol(Deaths)) / eval(as.symbol(Confirmed)))
label = ~ifelse(Province.State == '', as.character(Country.Region), paste0(Province.State, ", ", Country.Region)),
)
})
}
server <- function(input, output, session) {
pal <- colorBin(colorRamp(c("#00FF00","#FFDD00","#FF0000")), domain = NULL, bins = 15)
pal <- colorBin(colorRamp(c("#FFBB00","#FF0000"), interpolate = "linear"), domain = c(0:1), bins = 10)
output$mymap <- renderLeaflet({
date <- gsub("\\.0", ".", format(input$Date, "%m.%d.%y"))
Confirmed = paste0("X", substring(date, 2), ".confirmed")
Deaths = paste0("X", substring(date, 2), ".deaths")
Recovered = paste0("X", substring(date, 2))
leaflet(data) %>%
setView(lng = 0, lat = 0, zoom = 1.5) %>%
addProviderTiles(providers$CartoDB.DarkMatterNoLabels) %>%
addCircles(
data = data,
lat = ~Lat,
lng = ~Long,
weight = 1,
radius = ~log(eval(as.symbol(Confirmed))) * 50000,
fillOpacity = 0.5,
#popup=~paste0(
#  ifelse(Province.State == '', as.character(Country.Region), paste0(Province.State, ", ", Country.Region)),
#"<br># Confirmed: ", eval(as.symbol(Confirmed)),
#"<br># Recovered: ", eval(as.symbol(Recovered)),
#"<br># Deaths: ", eval(as.symbol(Deaths)),
#"<br># Active: ", eval(as.symbol(Confirmed)) - eval(as.symbol(Deaths)) - eval(as.symbol(Recovered)),
#),
#color=~pal(.5 - ((eval(as.symbol(Recovered)) - eval(as.symbol((Deaths)))) / 2 / eval(as.symbol(((Confirmed)))))),
color = ~pal(eval(as.symbol(Deaths)) / eval(as.symbol(Confirmed))),
label = ~ifelse(Province.State == '', as.character(Country.Region), paste0(Province.State, ", ", Country.Region)),
)
})
}
shinyApp(ui, server)
server <- function(input, output, session) {
pal <- colorBin(colorRamp(c("#00FF00","#FFDD00","#FF0000")), domain = NULL, bins = 15)
pal <- colorBin(colorRamp(c("#FFBB00","#FF0000"), interpolate = "linear"), domain = c(0:1), bins = 10)
output$mymap <- renderLeaflet({
date <- gsub("\\.0", ".", format(input$Date, "%m.%d.%y"))
Confirmed = paste0("X", substring(date, 2), ".confirmed")
Deaths = paste0("X", substring(date, 2), ".deaths")
Recovered = paste0("X", substring(date, 2))
leaflet(data) %>%
setView(lng = 0, lat = 0, zoom = 1.5) %>%
addProviderTiles(providers$CartoDB.DarkMatterNoLabels) %>%
addCircles(
data = data,
lat = ~Lat,
lng = ~Long,
weight = 1,
radius = ~log(eval(as.symbol(Confirmed))) * 50000,
fillOpacity = 0.5,
#popup=~paste0(
#  ifelse(Province.State == '', as.character(Country.Region), paste0(Province.State, ", ", Country.Region)),
#"<br># Confirmed: ", eval(as.symbol(Confirmed)),
#"<br># Recovered: ", eval(as.symbol(Recovered)),
#"<br># Deaths: ", eval(as.symbol(Deaths)),
#"<br># Active: ", eval(as.symbol(Confirmed)) - eval(as.symbol(Deaths)) - eval(as.symbol(Recovered)),
#),
#color=~pal(.5 - ((eval(as.symbol(Recovered)) - eval(as.symbol((Deaths)))) / 2 / eval(as.symbol(((Confirmed)))))),
color = ~pal(sqrt(eval(as.symbol(Deaths)) / eval(as.symbol(Confirmed)))),
label = ~ifelse(Province.State == '', as.character(Country.Region), paste0(Province.State, ", ", Country.Region)),
)
})
}
shinyApp(ui, server)
server <- function(input, output, session) {
pal <- colorBin(colorRamp(c("#00FF00","#FFDD00","#FF0000")), domain = NULL, bins = 15)
pal <- colorBin(colorRamp(c("#FFBB00","#FF0000"), interpolate = "linear"), domain = c(0:1), bins = 10)
output$mymap <- renderLeaflet({
date <- gsub("\\.0", ".", format(input$Date, "%m.%d.%y"))
Confirmed = paste0("X", substring(date, 2), ".confirmed")
Deaths = paste0("X", substring(date, 2), ".deaths")
Recovered = paste0("X", substring(date, 2))
leaflet(data) %>%
setView(lng = 0, lat = 0, zoom = 1.5) %>%
addProviderTiles(providers$CartoDB.DarkMatterNoLabels) %>%
addCircles(
data = data,
lat = ~Lat,
lng = ~Long,
weight = 1,
radius = ~log(eval(as.symbol(Confirmed))) * 50000,
fillOpacity = 0.5,
popup=~paste0(
ifelse(Province.State == '', as.character(Country.Region), paste0(Province.State, ", ", Country.Region)),
"<br># Confirmed: ", eval(as.symbol(Confirmed)),
"<br># Recovered: ", eval(as.symbol(Recovered)),
"<br># Deaths: ", eval(as.symbol(Deaths)),
"<br># Active: ", eval(as.symbol(Confirmed)) - eval(as.symbol(Deaths)) - eval(as.symbol(Recovered)),
),
#color=~pal(.5 - ((eval(as.symbol(Recovered)) - eval(as.symbol((Deaths)))) / 2 / eval(as.symbol(((Confirmed)))))),
color = ~pal(sqrt(eval(as.symbol(Deaths)) / eval(as.symbol(Confirmed)))),
label = ~ifelse(Province.State == '', as.character(Country.Region), paste0(Province.State, ", ", Country.Region)),
)
})
}
shinyApp(ui, server)
server <- function(input, output, session) {
pal <- colorBin(colorRamp(c("#00FF00","#FFDD00","#FF0000")), domain = NULL, bins = 15)
pal <- colorBin(colorRamp(c("#FFBB00","#FF0000"), interpolate = "linear"), domain = c(0:1), bins = 10)
output$mymap <- renderLeaflet({
date <- gsub("\\.0", ".", format(input$Date, "%m.%d.%y"))
Confirmed = paste0("X", substring(date, 2), ".confirmed")
Deaths = paste0("X", substring(date, 2), ".deaths")
Recovered = paste0("X", substring(date, 2))
leaflet(data) %>%
setView(lng = 0, lat = 0, zoom = 1.5) %>%
addProviderTiles(providers$CartoDB.DarkMatterNoLabels) %>%
addCircles(
data = data,
lat = ~Lat,
lng = ~Long,
weight = 1,
radius = ~log(eval(as.symbol(Confirmed))) * 50000,
fillOpacity = 0.5,
popup=~paste0(
ifelse(Province.State == '', as.character(Country.Region), paste0(Province.State, ", ", Country.Region)),
),
#color=~pal(.5 - ((eval(as.symbol(Recovered)) - eval(as.symbol((Deaths)))) / 2 / eval(as.symbol(((Confirmed)))))),
color = ~pal(sqrt(eval(as.symbol(Deaths)) / eval(as.symbol(Confirmed)))),
label = ~ifelse(Province.State == '', as.character(Country.Region), paste0(Province.State, ", ", Country.Region)),
)
})
}
shinyApp(ui, server)
server <- function(input, output, session) {
pal <- colorBin(colorRamp(c("#00FF00","#FFDD00","#FF0000")), domain = NULL, bins = 15)
pal <- colorBin(colorRamp(c("#FFBB00","#FF0000"), interpolate = "linear"), domain = c(0:1), bins = 10)
output$mymap <- renderLeaflet({
date <- gsub("\\.0", ".", format(input$Date, "%m.%d.%y"))
Confirmed = paste0("X", substring(date, 2), ".confirmed")
Deaths = paste0("X", substring(date, 2), ".deaths")
Recovered = paste0("X", substring(date, 2))
leaflet(data) %>%
setView(lng = 0, lat = 0, zoom = 1.5) %>%
addProviderTiles(providers$CartoDB.DarkMatterNoLabels) %>%
addCircles(
data = data,
lat = ~Lat,
lng = ~Long,
weight = 1,
radius = ~log(eval(as.symbol(Confirmed))) * 50000,
fillOpacity = 0.5,
popup=~paste0(
"<br># Confirmed: ", eval(as.symbol(Confirmed)),
"<br># Recovered: ", eval(as.symbol(Recovered)),
"<br># Deaths: ", eval(as.symbol(Deaths)),
"<br># Active: ", eval(as.symbol(Confirmed)) - eval(as.symbol(Deaths)) - eval(as.symbol(Recovered)),
),
#color=~pal(.5 - ((eval(as.symbol(Recovered)) - eval(as.symbol((Deaths)))) / 2 / eval(as.symbol(((Confirmed)))))),
color = ~pal(sqrt(eval(as.symbol(Deaths)) / eval(as.symbol(Confirmed)))),
label = ~ifelse(Province.State == '', as.character(Country.Region), paste0(Province.State, ", ", Country.Region)),
)
})
}
shinyApp(ui, server)
server <- function(input, output, session) {
pal <- colorBin(colorRamp(c("#00FF00","#FFDD00","#FF0000")), domain = NULL, bins = 15)
pal <- colorBin(colorRamp(c("#FFBB00","#FF0000"), interpolate = "linear"), domain = c(0:1), bins = 10)
output$mymap <- renderLeaflet({
date <- gsub("\\.0", ".", format(input$Date, "%m.%d.%y"))
Confirmed = paste0("X", substring(date, 2), ".confirmed")
Deaths = paste0("X", substring(date, 2), ".deaths")
Recovered = paste0("X", substring(date, 2))
leaflet(data) %>%
setView(lng = 0, lat = 0, zoom = 1.5) %>%
addProviderTiles(providers$CartoDB.DarkMatterNoLabels) %>%
addCircles(
data = data,
lat = ~Lat,
lng = ~Long,
weight = 1,
radius = ~log(eval(as.symbol(Confirmed))) * 50000,
fillOpacity = 0.5,
popup=~paste0(
ifelse(Province.State == '', as.character(Country.Region), paste0(Province.State, ", ", Country.Region)),
"<br># Confirmed: ", eval(as.symbol(Confirmed)),
"<br># Recovered: ", eval(as.symbol(Recovered)),
"<br># Deaths: ", eval(as.symbol(Deaths)),
"<br># Active: ", eval(as.symbol(Confirmed)) - eval(as.symbol(Deaths)) - eval(as.symbol(Recovered))
),
#color=~pal(.5 - ((eval(as.symbol(Recovered)) - eval(as.symbol((Deaths)))) / 2 / eval(as.symbol(((Confirmed)))))),
color = ~pal(sqrt(eval(as.symbol(Deaths)) / eval(as.symbol(Confirmed)))),
label = ~ifelse(Province.State == '', as.character(Country.Region), paste0(Province.State, ", ", Country.Region)),
)
})
}
shinyApp(ui, server)
server <- function(input, output, session) {
pal <- colorBin(colorRamp(c("#00FF00","#FFDD00","#FF0000")), domain = NULL, bins = 15)
pal <- colorBin(colorRamp(c("#FFBB00","#FF0000"), interpolate = "linear"), domain = c(0:1), bins = 10)
output$mymap <- renderLeaflet({
date <- gsub("\\.0", ".", format(input$Date, "%m.%d.%y"))
Confirmed = paste0("X", substring(date, 2), ".confirmed")
Deaths = paste0("X", substring(date, 2), ".deaths")
Recovered = paste0("X", substring(date, 2))
leaflet(data) %>%
#setView(lng = 0, lat = 0, zoom = 1.5) %>%
addProviderTiles(providers$CartoDB.DarkMatterNoLabels) %>%
addCircles(
data = data,
lat = ~Lat,
lng = ~Long,
weight = 1,
radius = ~log(eval(as.symbol(Confirmed))) * 50000,
fillOpacity = 0.5,
popup=~paste0(
ifelse(Province.State == '', as.character(Country.Region), paste0(Province.State, ", ", Country.Region)),
"<br># Confirmed: ", eval(as.symbol(Confirmed)),
"<br># Recovered: ", eval(as.symbol(Recovered)),
"<br># Deaths: ", eval(as.symbol(Deaths)),
"<br># Active: ", eval(as.symbol(Confirmed)) - eval(as.symbol(Deaths)) - eval(as.symbol(Recovered))
),
#color=~pal(.5 - ((eval(as.symbol(Recovered)) - eval(as.symbol((Deaths)))) / 2 / eval(as.symbol(((Confirmed)))))),
color = ~pal(sqrt(eval(as.symbol(Deaths)) / eval(as.symbol(Confirmed)))),
label = ~ifelse(Province.State == '', as.character(Country.Region), paste0(Province.State, ", ", Country.Region)),
)
})
}
shinyApp(ui, server)
server <- function(input, output, session) {
pal <- colorBin(colorRamp(c("#00FF00","#FFDD00","#FF0000")), domain = NULL, bins = 15)
pal <- colorBin(colorRamp(c("#FFBB00","#FF0000"), interpolate = "linear"), domain = c(0:1), bins = 10)
output$mymap <- renderLeaflet({
date <- gsub("\\.0", ".", format(input$Date, "%m.%d.%y"))
Confirmed = paste0("X", substring(date, 2), ".confirmed")
Deaths = paste0("X", substring(date, 2), ".deaths")
Recovered = paste0("X", substring(date, 2))
leaflet(data) %>%
#setView(lng = 0, lat = 0, zoom = 1.5) %>%
addProviderTiles(providers$CartoDB.DarkMatterNoLabels) %>%
addCircles(
data = data,
lat = ~Lat,
lng = ~Long,
weight = 1,
radius = ~log(eval(as.symbol(Confirmed))) * 50000,
fillOpacity = 0.5,
popup=~paste0(
ifelse(Province.State == '', as.character(Country.Region), paste0(Province.State, ", ", Country.Region)),
"<br># Confirmed: ", eval(as.symbol(Confirmed)),
"<br># Recovered: ", eval(as.symbol(Recovered)),
"<br># Deaths: ", eval(as.symbol(Deaths)),
"<br># Active: ", eval(as.symbol(Confirmed)) - eval(as.symbol(Deaths)) - eval(as.symbol(Recovered))
),
#color=~pal(.5 - ((eval(as.symbol(Recovered)) - eval(as.symbol((Deaths)))) / 2 / eval(as.symbol(((Confirmed)))))),
color = ~pal(sqrt(eval(as.symbol(Deaths)) / eval(as.symbol(Confirmed)))),
label = ~ifelse(Province.State == '', as.character(Country.Region), paste0(Province.State, ", ", Country.Region)),
)
})
}
shinyApp(ui, server)
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
sliderInput(
"Date",
"Dates:",
min = as.Date("2020-01-22","%Y-%m-%d"),
max = as.Date("2020-03-13","%Y-%m-%d"),
value = as.Date("2020-03-13","%Y-%m-%d"),
timeFormat="%m-%d-%Y",
animate = T
)
),
mainPanel(
leafletOutput(outputId = "mymap"),
),
)
)
shinyApp(ui, server)
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
sliderInput(
"Date",
"Dates:",
min = as.Date("2020-01-22","%Y-%m-%d"),
max = as.Date("2020-03-13","%Y-%m-%d"),
value = as.Date("2020-03-13","%Y-%m-%d"),
timeFormat="%m-%d-%Y",
animate = (animationOptions(interval = 200, loop = T))
)
),
mainPanel(
leafletOutput(outputId = "mymap"),
),
)
)
shinyApp(ui, server)
shinyApp(ui, server)
source('~/code/sialab/covid_vis/src/time_series.r')
shinyApp(ui, server)
source('~/code/sialab/covid_vis/src/time_series.r')
shinyApp(ui, server)
source('~/code/sialab/covid_vis/src/time_series.r')
shinyApp(ui, server)
proxy %>% clearShapes() %>% addCircles(
data = data,
lat = ~Lat,
lng = ~Long,
weight = 1,
radius = ~log(eval(as.symbol(Confirmed))) * 50000,
fillOpacity = 0.5,
popup=~paste0(
ifelse(Province.State == '', as.character(Country.Region), paste0(Province.State, ", ", Country.Region)),
"<br># Confirmed: ", eval(as.symbol(Confirmed)),
"<br># Recovered: ", eval(as.symbol(Recovered)),
"<br># Deaths: ", eval(as.symbol(Deaths)),
"<br># Active: ", eval(as.symbol(Confirmed)) - eval(as.symbol(Deaths)) - eval(as.symbol(Recovered))
),
#color=~pal(.5 - ((eval(as.symbol(Recovered)) - eval(as.symbol((Deaths)))) / 2 / eval(as.symbol(((Confirmed)))))),
color = ~pal(sqrt(eval(as.symbol(Deaths)) / eval(as.symbol(Confirmed)))),
label = ~ifelse(Province.State == '', as.character(Country.Region), paste0(Province.State, ", ", Country.Region)),
)
source('~/code/sialab/covid_vis/src/time_series.r')
shinyApp(ui, server)
source('~/code/sialab/covid_vis/src/time_series.r')
shinyApp(ui, server)
source('~/code/sialab/covid_vis/src/time_series.r')
shinyApp(ui, server)
source('~/code/sialab/covid_vis/src/time_series.r')
source('~/code/sialab/covid_vis/src/time_series.r')
shinyApp(ui, server)
source('~/code/sialab/covid_vis/src/time_series.r')
shinyApp(ui, server)
proxy %>% clearMarkers() %>% clearShapes()
source('~/code/sialab/covid_vis/src/time_series.r')
proxy %>% clearMarkers() %>% clearShapes()
shinyApp(ui, server)
source('~/code/sialab/covid_vis/src/time_series.r')
shinyApp(ui, server)
source('~/code/sialab/covid_vis/src/time_series.r')
shinyApp(ui, server)
source('~/code/sialab/covid_vis/src/app.r')
source('~/code/sialab/covid_vis/src/app.r')
shinyApp(ui, server)
source('~/code/sialab/covid_vis/src/app.r')
shinyApp(ui, server)
install.packages("rsconnect")
rsconnect::setAccountInfo(name='alexying2110',
token='ADD01F7590BF0761C97C0D37305C335B',
secret='<SECRET>')
rsconnect::setAccountInfo(name='alexying2110',
token='ADD01F7590BF0761C97C0D37305C335B',
secret='4KS6/eSfDlLGy4ag6kiPwr7DNqGWz6HemZFALLWw')
library(rsconnect)
rsconnect::deployApp('~/code/sialab/covid_vis/src/app.r')
library(rsconnect)
rsconnect::deployApp('~/code/sialab/covid_vis/')
library(rsconnect)
rsconnect::deployApp('~/code/sialab/covid_vis/')
library(rsconnect)
rsconnect::deployApp('~/code/sialab/covid_vis/src/app.r')
library(rsconnect)
rsconnect::deployApp('~/code/sialab/covid_vis/')
library(rsconnect)
rsconnect::deployApp('~/code/sialab/covid_vis/')
library(rsconnect)
rsconnect::deployApp('~/code/sialab/covid_vis/')
